<section class="community-section">
    <div class="inner-community">
        <h1 class="community-title">Comunidad</h1>
        <div class="community-cards-container">
            <!-- Aquí se cargarán dinámicamente los posts con JS -->
        </div>
    </div>
</section>

<button class="button-add-post" onclick="openPopup()">
    <img src="/img/icon_button_add.svg">
</button>

<!-- Popup para agregar un post -->
<div id="postPopup" class="popup-container" style="display: none;">
    <div class="popup-content">
        <img src="/img/icon_close.svg" class="close-btn" onclick="closePopup()">
        <div class="top-pop-up-add-post">
            <textarea id="postInput" name="contenidoPost" placeholder="¿Qué quieres decir?" required></textarea>
            <button class="button-select-img">
                <img src="/img/icon_img.svg" alt="Seleccionar imagen">
            </button>
        </div>
        <button type="button" class="publish-btn" onclick="publicarPost()">Publicar</button>
    </div>
</div>

<script>
    // Cargar posts dinámicamente
    async function cargarPosts() {
    try {
        const response = await fetch('/Home/ObtenerPosts', { method: 'GET' });

        if (!response.ok) {
            throw new Error(`Error HTTP: ${response.status}`);
        }

        const data = await response.json();

        if (data.success) {
            const container = document.querySelector('.community-cards-container');
            container.innerHTML = ''; // Limpiar antes de cargar nuevos posts

            data.posts.forEach(post => {
                const postHtml = `
                    <div class="community-card" data-id="${post.id_post}">
                        <img src="/img/${post.imagen_url}" alt="Imagen del post" class="community-card-image">
                        <div class="bottom-community-card">
                            <p class="community-card-text">${post.contenido_post}</p>
                            <span class="community-time-posted">${post.fecha_creacion} por ${post.autor}</span>
                            <div class="community-card-footer">
                                <button class="like-button" onclick="darLike(${post.id_post}, this)">
                                    <img src="/img/icon_like.svg" class="img-like">
                                    <span class="like-count">${post.likes}</span>
                                </button>
                                <button class="dislike-button" onclick="darDislike(${post.id_post}, this)">
                                    <img src="/img/icon_dislike.svg" class="img-dislike">
                                    <span class="dislike-count">${post.dislikes}</span>
                                </button>
                            </div>
                        </div>
                    </div>`;
                container.insertAdjacentHTML('beforeend', postHtml);
            });
        } else {
            console.error('Error al cargar posts:', data.message);
        }
    } catch (error) {
        console.error('Error al obtener posts:', error);
    }
}


    // Dar Like a un post
    async function darLike(idPost, button) {
        try {
            const response = await fetch('/Home/DarLike', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ idPost })
            });

            if (response.ok) {
                const likeCount = button.querySelector('.like-count');
                likeCount.textContent = parseInt(likeCount.textContent) + 1;
            } else {
                console.error("Error al dar like.");
            }
        } catch (error) {
            console.error("Error:", error);
        }
    }

    // Dar Dislike a un post
    async function darDislike(idPost, button) {
        try {
            const response = await fetch('/Home/DarDislike', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ idPost })
            });

            if (response.ok) {
                const dislikeCount = button.querySelector('.dislike-count');
                dislikeCount.textContent = parseInt(dislikeCount.textContent) + 1;
            } else {
                console.error("Error al dar dislike.");
            }
        } catch (error) {
            console.error("Error:", error);
        }
    }

    // Publicar un nuevo post
    async function publicarPost() {
        const contenidoPost = document.getElementById('postInput').value.trim();

        if (!contenidoPost) {
            alert('El contenido no puede estar vacío.');
            return;
        }

        try {
            const response = await fetch('/Home/PublicarPost', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ contenidoPost })
            });

            const data = await response.json();

            if (data.success) {
                document.getElementById('postInput').value = '';
                closePopup();
                cargarPosts(); // Recargar los posts después de publicar
            } else {
                alert(data.message || 'Error al publicar el post.');
            }
        } catch (error) {
            console.error("Error:", error);
            alert('Ocurrió un error al intentar publicar el post.');
        }
    }

    // Cargar los posts al cargar la página
    document.addEventListener('DOMContentLoaded', cargarPosts);
</script>
