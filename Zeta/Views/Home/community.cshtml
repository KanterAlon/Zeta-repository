<section class="community-section">
    <div class="inner-community">
        <h1 class="community-title">Comunidad</h1>
        <div class="community-cards-container">
            <!-- Aquí se cargarán dinámicamente los posts con JS -->
        </div>
    </div>
    
    <button class="button-add-post" onclick="openPopup()">
        <img src="/img/icon_button_add.svg">
    </button>
</section>


<!-- Popup para agregar un post -->
<div id="postPopup" class="popup-container" style="display: none;">
    <div class="popup-content">
        <img src="/img/icon_close.svg" class="close-btn" onclick="closePopup()">
        <div class="top-pop-up-add-post">
            <textarea id="postInput" name="contenidoPost" placeholder="¿Qué quieres decir?" required></textarea>
            <button class="button-select-img">
                <img src="/img/icon_img.svg" alt="Seleccionar imagen">
            </button>
        </div>
        <button type="button" class="publish-btn" onclick="publicarPost()">Publicar</button>
    </div>
</div>

<script>
    // ID único para el usuario (simulado ya que no tenemos autenticación)
    const USER_ID = 'user_' + Math.random().toString(36).substr(2, 9);
    
    // Funciones para el popup
    function openPopup() {
        document.getElementById('postPopup').style.display = 'flex';
    }
    
    function closePopup() {
        document.getElementById('postPopup').style.display = 'none';
        document.getElementById('postInput').value = '';
    }
    
    // Obtener posts del Local Storage
    function obtenerPosts() {
        const posts = localStorage.getItem('communityPosts');
        return posts ? JSON.parse(posts) : [];
    }
    
    // Guardar posts en el Local Storage
    function guardarPosts(posts) {
        localStorage.setItem('communityPosts', JSON.stringify(posts));
    }
    
    // Obtener interacciones del usuario del Local Storage
    function obtenerInteraccionesUsuario() {
        const interacciones = localStorage.getItem('userInteractions');
        return interacciones ? JSON.parse(interacciones) : {};
    }
    
    // Guardar interacciones del usuario en el Local Storage
    function guardarInteraccionesUsuario(interacciones) {
        localStorage.setItem('userInteractions', JSON.stringify(interacciones));
    }
    
    // Cargar posts dinámicamente
    function cargarPosts() {
        const posts = obtenerPosts();
        const interacciones = obtenerInteraccionesUsuario();
        
        const container = document.querySelector('.community-cards-container');
        container.innerHTML = ''; // Limpiar antes de cargar nuevos posts
        
        if (posts.length === 0) {
            container.innerHTML = '<p>No hay posts aún. ¡Sé el primero en publicar!</p>';
            return;
        }
        
        posts.forEach(post => {
            const userInteraction = interacciones[post.id] || {};
            const hasLiked = userInteraction.liked || false;
            const hasDisliked = userInteraction.disliked || false;
            
            const postHtml = `
                <div class="community-card" data-id="${post.id}">
                    ${post.imagen_url ? `<img src="${post.imagen_url}" alt="Imagen del post" class="community-card-image">` : ''}
                    <div class="bottom-community-card">
                        <p class="community-card-text">${post.contenido}</p>
                        <span class="community-time-posted">${post.fecha}</span>
                        <div class="community-card-footer">
                            <button class="like-button" onclick="darLike('${post.id}', this)">
                                <img src="/img/icon_like${hasLiked ? '-fill' : ''}.svg" class="img-like">
                                <span class="like-count">${post.likes}</span>
                            </button>
                            <button class="dislike-button" onclick="darDislike('${post.id}', this)">
                                <img src="/img/icon_dislike${hasDisliked ? '-fill' : ''}.svg" class="img-dislike">
                                <span class="dislike-count">${post.dislikes}</span>
                            </button>
                        </div>
                    </div>
                </div>`;
            container.insertAdjacentHTML('beforeend', postHtml);
        });
    }
    
    // Dar Like a un post
    function darLike(idPost, button) {
        const posts = obtenerPosts();
        const interacciones = obtenerInteraccionesUsuario();
        const postIndex = posts.findIndex(p => p.id === idPost);
        
        if (postIndex === -1) return;
        
        const post = posts[postIndex];
        const userInteraction = interacciones[idPost] || {};
        
        // Si ya había dado dislike, lo quitamos
        if (userInteraction.disliked) {
            post.dislikes--;
            userInteraction.disliked = false;
        }
        
        // Alternar like
        if (userInteraction.liked) {
            post.likes--;
            userInteraction.liked = false;
        } else {
            post.likes++;
            userInteraction.liked = true;
        }
        
        // Actualizar datos
        interacciones[idPost] = userInteraction;
        posts[postIndex] = post;
        
        guardarPosts(posts);
        guardarInteraccionesUsuario(interacciones);
        
        // Actualizar UI
        const likeImg = button.querySelector('.img-like');
        const likeCount = button.querySelector('.like-count');
        const dislikeButton = button.parentElement.querySelector('.dislike-button');
        const dislikeImg = dislikeButton.querySelector('.img-dislike');
        
        likeImg.src = `/img/icon_like${userInteraction.liked ? '-fill' : ''}.svg`;
        likeCount.textContent = post.likes;
        dislikeImg.src = `/img/icon_dislike${userInteraction.disliked ? '-fill' : ''}.svg`;
        
        // Actualizar contador de dislike (por si habíamos quitado uno)
        if (dislikeButton) {
            dislikeButton.querySelector('.dislike-count').textContent = post.dislikes;
        }
    }
    
    // Dar Dislike a un post
    function darDislike(idPost, button) {
        const posts = obtenerPosts();
        const interacciones = obtenerInteraccionesUsuario();
        const postIndex = posts.findIndex(p => p.id === idPost);
        
        if (postIndex === -1) return;
        
        const post = posts[postIndex];
        const userInteraction = interacciones[idPost] || {};
        
        // Si ya había dado like, lo quitamos
        if (userInteraction.liked) {
            post.likes--;
            userInteraction.liked = false;
        }
        
        // Alternar dislike
        if (userInteraction.disliked) {
            post.dislikes--;
            userInteraction.disliked = false;
        } else {
            post.dislikes++;
            userInteraction.disliked = true;
        }
        
        // Actualizar datos
        interacciones[idPost] = userInteraction;
        posts[postIndex] = post;
        
        guardarPosts(posts);
        guardarInteraccionesUsuario(interacciones);
        
        // Actualizar UI
        const dislikeImg = button.querySelector('.img-dislike');
        const dislikeCount = button.querySelector('.dislike-count');
        const likeButton = button.parentElement.querySelector('.like-button');
        const likeImg = likeButton.querySelector('.img-like');
        
        dislikeImg.src = `/img/icon_dislike${userInteraction.disliked ? '-fill' : ''}.svg`;
        dislikeCount.textContent = post.dislikes;
        likeImg.src = `/img/icon_like${userInteraction.liked ? '-fill' : ''}.svg`;
        
        // Actualizar contador de like (por si habíamos quitado uno)
        if (likeButton) {
            likeButton.querySelector('.like-count').textContent = post.likes;
        }
    }
    
    // Publicar un nuevo post
    function publicarPost() {
        const contenidoPost = document.getElementById('postInput').value.trim();
        
        if (!contenidoPost) {
            alert('El contenido no puede estar vacío.');
            return;
        }
        
        const posts = obtenerPosts();
        const nuevoPost = {
            id: 'post_' + Date.now(),
            contenido: contenidoPost,
            imagen_url: '', // Puedes implementar la subida de imágenes después
            fecha: new Date().toLocaleString(),
            likes: 0,
            dislikes: 0
        };
        
        posts.unshift(nuevoPost); // Agregar al inicio
        guardarPosts(posts);
        
        closePopup();
        cargarPosts(); // Recargar los posts después de publicar
    }
    
    // Inicializar con algunos posts de ejemplo si no hay ninguno
    function inicializarPostsEjemplo() {
        const posts = obtenerPosts();
        if (posts.length === 0) {
            const postsEjemplo = [
                {
                    id: 'post_1',
                    contenido: '¡Bienvenidos a la comunidad! Este es un post de ejemplo.',
                    imagen_url: '',
                    fecha: new Date().toLocaleString(),
                    likes: 0,
                    dislikes: 0
                },
                {
                    id: 'post_2',
                    contenido: 'No olviden dar like a los posts que les gusten.',
                    imagen_url: '',
                    fecha: new Date().toLocaleString(),
                    likes: 0,
                    dislikes: 0
                }
            ];
            guardarPosts(postsEjemplo);
        }
    }
    
    // Cargar los posts al cargar la página
    document.addEventListener('DOMContentLoaded', () => {
        inicializarPostsEjemplo();
        cargarPosts();
    });
</script>